generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  username      String         @unique
  email         String         @unique
  password      String
  role          String         @default("user")
  description   String?
  profileImage  String?
  coverImage    String?
  createdAt     DateTime       @default(now())
  posts         Post[]
  likes         Like[]
  bookmarks     Bookmark[]
  notifications Notification[] @relation("ReceivedNotifications")
  sentNotifications Notification[] @relation("SentNotifications")
  followers     Follow[]       @relation("Followers")
  following     Follow[]       @relation("Following")
  comments      Comment[]
}

model Post {
  id            Int            @id @default(autoincrement())
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  content       String
  imageURL      String?
  createdAt     DateTime       @default(now())
  likes         Like[]
  bookmarks     Bookmark[]
  notifications Notification[]
  comments     Comment[]
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model Notification {
  id        Int      @id @default(autoincrement())
  toUser    User     @relation("ReceivedNotifications", fields: [toUserId], references: [id], onDelete: Cascade)
  toUserId  Int
  type      String   // 'new_post', 'like', 'follow'
  message   String
  postId    Int?     // Csak poszt-értesítéseknél
  post      Post?    @relation(fields: [postId], references: [id])
  fromUser  User?    @relation("SentNotifications", fields: [fromUserId], references: [id]) // Új reláció
  fromUserId Int?    // Követést/like-ot kezdeményező felhasználó ID-ja
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([toUserId])
}


model Follow {
  id          Int      @id @default(autoincrement())
  follower    User     @relation("Following", fields: [followerId], references: [id])
  followerId  Int
  following   User     @relation("Followers", fields: [followingId], references: [id])
  followingId Int
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   // A komment szövege
  createdAt DateTime @default(now())
  userId    Int      // A kommentet író felhasználó
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    Int      // A kommenthez tartozó poszt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

